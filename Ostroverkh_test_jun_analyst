{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from math import *\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import statsmodels.api as sm  # для построения qq plot\n",
    "from scipy.stats import norm, normaltest\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "sale = pd.read_excel('/Users/kateosti/Desktop/beaty_city/Test/01_sales_ToShare.xlsx')\n",
    "leftover = pd.read_excel('/Users/kateosti/Desktop/beaty_city/Test/01_leftover _ToShare.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим данные"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Первая таблица Продаж: обработка данных "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Артикул старый</th>\n",
       "      <th>Размер</th>\n",
       "      <th>Месяц</th>\n",
       "      <th>Продажи, шт.</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>02025727Y052D0/55</td>\n",
       "      <td>XS</td>\n",
       "      <td>9</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02025727Y052D0/55</td>\n",
       "      <td>S</td>\n",
       "      <td>6</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>020245D5Z022/55D0</td>\n",
       "      <td>M</td>\n",
       "      <td>7</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>020245D5Z022/55D0</td>\n",
       "      <td>M</td>\n",
       "      <td>9</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>020245D5Z022/55D0</td>\n",
       "      <td>L</td>\n",
       "      <td>6</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60069</th>\n",
       "      <td>92011936231500/99</td>\n",
       "      <td>L</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60070</th>\n",
       "      <td>92011936231500/99</td>\n",
       "      <td>M</td>\n",
       "      <td>12</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60071</th>\n",
       "      <td>92014947Q62500/29</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60072</th>\n",
       "      <td>92021936J09500/01</td>\n",
       "      <td>M</td>\n",
       "      <td>12</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60073</th>\n",
       "      <td>92023945906500/01</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>60074 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Артикул старый Размер  Месяц  Продажи, шт.\n",
       "0      02025727Y052D0/55     XS      9            88\n",
       "1      02025727Y052D0/55      S      6           128\n",
       "2      020245D5Z022/55D0      M      7            83\n",
       "3      020245D5Z022/55D0      M      9            68\n",
       "4      020245D5Z022/55D0      L      6            74\n",
       "...                  ...    ...    ...           ...\n",
       "60069  92011936231500/99      L     12            62\n",
       "60070  92011936231500/99      M     12            74\n",
       "60071  92014947Q62500/29      0     12            64\n",
       "60072  92021936J09500/01      M     12            73\n",
       "60073  92023945906500/01      0     12           113\n",
       "\n",
       "[60074 rows x 4 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sale"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Переименую столбцы для удобства и чтобы вернуть копию на русском возьму set_axis\n",
    "df = sale.set_axis(['new_art', 'size', 'month', 'sales'], axis=1, inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['new_art', 'size', 'month', 'sales'], dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Новые названия столбцов\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 60074 entries, 0 to 60073\n",
      "Data columns (total 4 columns):\n",
      " #   Column   Non-Null Count  Dtype \n",
      "---  ------   --------------  ----- \n",
      " 0   new_art  60074 non-null  object\n",
      " 1   size     60074 non-null  object\n",
      " 2   month    60074 non-null  int64 \n",
      " 3   sales    60074 non-null  int64 \n",
      "dtypes: int64(2), object(2)\n",
      "memory usage: 1.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Предобработка данных:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Статистика продаж на WB - файл \"Задание01_Продажи_ToShare\"     \n",
    "Артикул старый - код цветомоделей, но в старом формате. ВАЖНО, он отличается нового формата артикулов, а именно    \n",
    "•\tЕсли он выглядит вот так (т.е. без знака \"/\"): \"21022322U1535900\", то тогда он является новым артикулом цветомодели      \n",
    "•\tЕсли знак \"/\" на 13 позиции, например: \"020245D5Z022/55D0\", то тогда новый артикул цветомодели из него получается простым удалением символа \"/\", т.е. в нашем случае это будет \"\"020245D5Z02255D0\"\"      \n",
    "•\tА если знак \"/\" на 15 позиции, например: \"02025727Y052D0/55\", то тогда новый артикул цветомодели можно получить как \"Левые 12 символов + правые два символа + два символа на позиция 13 и 14\", т.е. в нашем случае это \"02025727Y05255D0\"      \n",
    "•\tЕсть несколько «ошибочных» позиций, у которых знак «/» на 17 позиции, в таком случае надо просто взять 16 левых символов     \n",
    "•\tРазмер — это размер одежды, в случае если размера нет (\"no size\"), то это кодируется \"0\" в данной выгрузке     \n",
    "•\tМесяц - порядковый месяц, в котором были совершены продажи     \n",
    "•\tПродажи, шт. - число проданных единиц за указанный месяц    \n",
    "•\tВАЖНО: не по всем артикулам есть информация по остаткам/цене продажи/себестоимости, по таким позициям считать, что Их остаток равен 0    \n",
    "•\tСебестоимость равна 200 рублей / шт.    \n",
    "•\tЦена продажи составляет 1000 рублей / шт.    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask1 = df[\"new_art\"].str.find(\"/\") == 12\n",
    "mask2 = df[\"new_art\"].str.find(\"/\") == 14\n",
    "mask3 = df[\"new_art\"].str.find(\"/\") == 16\n",
    "\n",
    "df.loc[mask1, \"new_art\"] = df.loc[mask1, \"new_art\"].str.replace(\"/\",\"\")\n",
    "df.loc[mask2, \"new_art\"] = df.loc[mask2, \"new_art\"].replace(to_replace=\"(.+)(.{2})/(.+)\", value=r\"\\1\\3\\2\", regex=True)\n",
    "df.loc[mask3, \"new_art\"] = df.loc[mask3, \"new_art\"].str[:-4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>size</th>\n",
       "      <th>month</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>9</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>S</td>\n",
       "      <td>6</td>\n",
       "      <td>128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>020245D5Z02255D0</td>\n",
       "      <td>M</td>\n",
       "      <td>7</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>020245D5Z02255D0</td>\n",
       "      <td>M</td>\n",
       "      <td>9</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>020245D5Z02255D0</td>\n",
       "      <td>L</td>\n",
       "      <td>6</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60069</th>\n",
       "      <td>9201193623159900</td>\n",
       "      <td>L</td>\n",
       "      <td>12</td>\n",
       "      <td>62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60070</th>\n",
       "      <td>9201193623159900</td>\n",
       "      <td>M</td>\n",
       "      <td>12</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60071</th>\n",
       "      <td>92014947Q6252900</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60072</th>\n",
       "      <td>92021936J0950100</td>\n",
       "      <td>M</td>\n",
       "      <td>12</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60073</th>\n",
       "      <td>9202394590650100</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>60074 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                new_art size  month  sales\n",
       "0      02025727Y05255D0   XS      9     88\n",
       "1      02025727Y05255D0    S      6    128\n",
       "2      020245D5Z02255D0    M      7     83\n",
       "3      020245D5Z02255D0    M      9     68\n",
       "4      020245D5Z02255D0    L      6     74\n",
       "...                 ...  ...    ...    ...\n",
       "60069  9201193623159900    L     12     62\n",
       "60070  9201193623159900    M     12     74\n",
       "60071  92014947Q6252900    0     12     64\n",
       "60072  92021936J0950100    M     12     73\n",
       "60073  9202394590650100    0     12    113\n",
       "\n",
       "[60074 rows x 4 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "mask4 = df[\"size\"].str.find(\"0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       -1\n",
      "1       -1\n",
      "2       -1\n",
      "3       -1\n",
      "4       -1\n",
      "        ..\n",
      "60069   -1\n",
      "60070   -1\n",
      "60071    0\n",
      "60072   -1\n",
      "60073    0\n",
      "Name: size, Length: 60074, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(mask4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ВАЖНО: не по всем артикулам есть информация по остаткам/цене продажи/себестоимости, по таким позициям считать, что Их остаток равен 0\n",
    "# Себестоимость равна 200 рублей / шт.\n",
    "# Цена продажи составляет 1000 рублей / шт.\n",
    "# замена цены на 1000 рублей если сайз равен 0\n",
    "\n",
    "df['sales'] = np.where(df['size'] == '0', 1000, df['sales'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0       -1\n",
      "1       -1\n",
      "2       -1\n",
      "3       -1\n",
      "4       -1\n",
      "        ..\n",
      "60069   -1\n",
      "60070   -1\n",
      "60071    0\n",
      "60072   -1\n",
      "60073    0\n",
      "Name: size, Length: 60074, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(mask4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 60074 entries, 0 to 60073\n",
      "Data columns (total 4 columns):\n",
      " #   Column   Non-Null Count  Dtype \n",
      "---  ------   --------------  ----- \n",
      " 0   new_art  60074 non-null  object\n",
      " 1   size     60074 non-null  object\n",
      " 2   month    60074 non-null  int64 \n",
      " 3   sales    60074 non-null  int64 \n",
      "dtypes: int64(2), object(2)\n",
      "memory usage: 1.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Вторая таблица Остатки: обработка данных "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Артикул новый</th>\n",
       "      <th>Размер</th>\n",
       "      <th>Остаток на складе, шт.</th>\n",
       "      <th>Себестоимость, руб.</th>\n",
       "      <th>Цена продажи, руб.</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>010112159012 0100                             ...</td>\n",
       "      <td>M</td>\n",
       "      <td>118</td>\n",
       "      <td>1211</td>\n",
       "      <td>2846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>010112159052 01P0                             ...</td>\n",
       "      <td>L</td>\n",
       "      <td>247</td>\n",
       "      <td>465</td>\n",
       "      <td>1311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>010112159052 01P0                             ...</td>\n",
       "      <td>M</td>\n",
       "      <td>134</td>\n",
       "      <td>763</td>\n",
       "      <td>1564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>010112159052 01P0                             ...</td>\n",
       "      <td>S</td>\n",
       "      <td>93</td>\n",
       "      <td>762</td>\n",
       "      <td>1631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>010112159052 58P0                             ...</td>\n",
       "      <td>XXL</td>\n",
       "      <td>20</td>\n",
       "      <td>342</td>\n",
       "      <td>698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10323</th>\n",
       "      <td>920239I8G025 0200                             ...</td>\n",
       "      <td>XS</td>\n",
       "      <td>81</td>\n",
       "      <td>538</td>\n",
       "      <td>1442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10324</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>L</td>\n",
       "      <td>110</td>\n",
       "      <td>1244</td>\n",
       "      <td>3346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10325</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>M</td>\n",
       "      <td>501</td>\n",
       "      <td>1079</td>\n",
       "      <td>3097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10326</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>S</td>\n",
       "      <td>499</td>\n",
       "      <td>449</td>\n",
       "      <td>1051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10327</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>XS</td>\n",
       "      <td>205</td>\n",
       "      <td>836</td>\n",
       "      <td>2483</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10328 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Артикул новый  \\\n",
       "0      010112159012 0100                             ...   \n",
       "1      010112159052 01P0                             ...   \n",
       "2      010112159052 01P0                             ...   \n",
       "3      010112159052 01P0                             ...   \n",
       "4      010112159052 58P0                             ...   \n",
       "...                                                  ...   \n",
       "10323  920239I8G025 0200                             ...   \n",
       "10324  920239I8G155 3000                             ...   \n",
       "10325  920239I8G155 3000                             ...   \n",
       "10326  920239I8G155 3000                             ...   \n",
       "10327  920239I8G155 3000                             ...   \n",
       "\n",
       "                          Размер  Остаток на складе, шт.  Себестоимость, руб.  \\\n",
       "0      M                                             118                 1211   \n",
       "1      L                                             247                  465   \n",
       "2      M                                             134                  763   \n",
       "3      S                                              93                  762   \n",
       "4      XXL                                            20                  342   \n",
       "...                          ...                     ...                  ...   \n",
       "10323  XS                                             81                  538   \n",
       "10324  L                                             110                 1244   \n",
       "10325  M                                             501                 1079   \n",
       "10326  S                                             499                  449   \n",
       "10327  XS                                            205                  836   \n",
       "\n",
       "       Цена продажи, руб.  \n",
       "0                    2846  \n",
       "1                    1311  \n",
       "2                    1564  \n",
       "3                    1631  \n",
       "4                     698  \n",
       "...                   ...  \n",
       "10323                1442  \n",
       "10324                3346  \n",
       "10325                3097  \n",
       "10326                1051  \n",
       "10327                2483  \n",
       "\n",
       "[10328 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leftover"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Переименую столбцы для удобства и чтобы вернуть копию на русском возьму set_axis\n",
    "df2 = leftover.set_axis(['new_art', 'size', 'remainder', 'cost_price', 'price'], axis=1, inplace=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>size</th>\n",
       "      <th>remainder</th>\n",
       "      <th>cost_price</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>010112159012 0100                             ...</td>\n",
       "      <td>M</td>\n",
       "      <td>118</td>\n",
       "      <td>1211</td>\n",
       "      <td>2846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>010112159052 01P0                             ...</td>\n",
       "      <td>L</td>\n",
       "      <td>247</td>\n",
       "      <td>465</td>\n",
       "      <td>1311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>010112159052 01P0                             ...</td>\n",
       "      <td>M</td>\n",
       "      <td>134</td>\n",
       "      <td>763</td>\n",
       "      <td>1564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>010112159052 01P0                             ...</td>\n",
       "      <td>S</td>\n",
       "      <td>93</td>\n",
       "      <td>762</td>\n",
       "      <td>1631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>010112159052 58P0                             ...</td>\n",
       "      <td>XXL</td>\n",
       "      <td>20</td>\n",
       "      <td>342</td>\n",
       "      <td>698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10323</th>\n",
       "      <td>920239I8G025 0200                             ...</td>\n",
       "      <td>XS</td>\n",
       "      <td>81</td>\n",
       "      <td>538</td>\n",
       "      <td>1442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10324</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>L</td>\n",
       "      <td>110</td>\n",
       "      <td>1244</td>\n",
       "      <td>3346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10325</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>M</td>\n",
       "      <td>501</td>\n",
       "      <td>1079</td>\n",
       "      <td>3097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10326</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>S</td>\n",
       "      <td>499</td>\n",
       "      <td>449</td>\n",
       "      <td>1051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10327</th>\n",
       "      <td>920239I8G155 3000                             ...</td>\n",
       "      <td>XS</td>\n",
       "      <td>205</td>\n",
       "      <td>836</td>\n",
       "      <td>2483</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10328 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 new_art  \\\n",
       "0      010112159012 0100                             ...   \n",
       "1      010112159052 01P0                             ...   \n",
       "2      010112159052 01P0                             ...   \n",
       "3      010112159052 01P0                             ...   \n",
       "4      010112159052 58P0                             ...   \n",
       "...                                                  ...   \n",
       "10323  920239I8G025 0200                             ...   \n",
       "10324  920239I8G155 3000                             ...   \n",
       "10325  920239I8G155 3000                             ...   \n",
       "10326  920239I8G155 3000                             ...   \n",
       "10327  920239I8G155 3000                             ...   \n",
       "\n",
       "                            size  remainder  cost_price  price  \n",
       "0      M                                118        1211   2846  \n",
       "1      L                                247         465   1311  \n",
       "2      M                                134         763   1564  \n",
       "3      S                                 93         762   1631  \n",
       "4      XXL                               20         342    698  \n",
       "...                          ...        ...         ...    ...  \n",
       "10323  XS                                81         538   1442  \n",
       "10324  L                                110        1244   3346  \n",
       "10325  M                                501        1079   3097  \n",
       "10326  S                                499         449   1051  \n",
       "10327  XS                               205         836   2483  \n",
       "\n",
       "[10328 rows x 5 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        010112159012 0100                             ...\n",
       "1        010112159052 01P0                             ...\n",
       "2        010112159052 01P0                             ...\n",
       "3        010112159052 01P0                             ...\n",
       "4        010112159052 58P0                             ...\n",
       "                               ...                        \n",
       "10323    920239I8G025 0200                             ...\n",
       "10324    920239I8G155 3000                             ...\n",
       "10325    920239I8G155 3000                             ...\n",
       "10326    920239I8G155 3000                             ...\n",
       "10327    920239I8G155 3000                             ...\n",
       "Name: new_art, Length: 10328, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# посмотрим как представлены данные артикула в таблице Остатки\n",
    "df2.new_art"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        0101121590120100\n",
       "1        01011215905201P0\n",
       "2        01011215905201P0\n",
       "3        01011215905201P0\n",
       "4        01011215905258P0\n",
       "               ...       \n",
       "10323    920239I8G0250200\n",
       "10324    920239I8G1553000\n",
       "10325    920239I8G1553000\n",
       "10326    920239I8G1553000\n",
       "10327    920239I8G1553000\n",
       "Name: new_art, Length: 10328, dtype: object"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# удалим пробелы\n",
    "df2.new_art = df2.new_art.str.replace(\" \",\"\")\n",
    "df2.new_art"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# заменим no size на нуль\n",
    "df_filter = df2['size'].isin(['no size'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2.loc[df_filter, \"size\"] = df2.loc[df_filter, \"size\"].str.replace('no size', '0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        False\n",
       "1        False\n",
       "2        False\n",
       "3        False\n",
       "4        False\n",
       "         ...  \n",
       "10323    False\n",
       "10324    False\n",
       "10325    False\n",
       "10326    False\n",
       "10327    False\n",
       "Name: size, Length: 10328, dtype: bool"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_filter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10328 entries, 0 to 10327\n",
      "Data columns (total 5 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   new_art     10328 non-null  object\n",
      " 1   size        10328 non-null  object\n",
      " 2   remainder   10328 non-null  int64 \n",
      " 3   cost_price  10328 non-null  int64 \n",
      " 4   price       10328 non-null  int64 \n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 403.6+ KB\n"
     ]
    }
   ],
   "source": [
    "df2.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Объединение таблиц"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# df2 с new_art которые не находятся в df.new_art с isin а затем df и приведенный dataframe\n",
    "#df3 = pd.concat([df, df2[~df2.new_art.isin(df.new_art)]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "general_df = df.merge(df2, how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>size</th>\n",
       "      <th>month</th>\n",
       "      <th>sales</th>\n",
       "      <th>remainder</th>\n",
       "      <th>cost_price</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>9.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>6.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>11.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>7.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>10.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70397</th>\n",
       "      <td>920239I8G0250200</td>\n",
       "      <td>XS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>81.0</td>\n",
       "      <td>538.0</td>\n",
       "      <td>1442.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70398</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>L</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>110.0</td>\n",
       "      <td>1244.0</td>\n",
       "      <td>3346.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70399</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1079.0</td>\n",
       "      <td>3097.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70400</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>S</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>499.0</td>\n",
       "      <td>449.0</td>\n",
       "      <td>1051.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70401</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>XS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>205.0</td>\n",
       "      <td>836.0</td>\n",
       "      <td>2483.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70402 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                new_art                       size  month  sales  remainder  \\\n",
       "0      02025727Y05255D0                         XS    9.0   88.0        NaN   \n",
       "1      02025727Y05255D0                         XS    6.0   82.0        NaN   \n",
       "2      02025727Y05255D0                         XS   11.0   78.0        NaN   \n",
       "3      02025727Y05255D0                         XS    7.0   99.0        NaN   \n",
       "4      02025727Y05255D0                         XS   10.0   93.0        NaN   \n",
       "...                 ...                        ...    ...    ...        ...   \n",
       "70397  920239I8G0250200  XS                           NaN    NaN       81.0   \n",
       "70398  920239I8G1553000  L                            NaN    NaN      110.0   \n",
       "70399  920239I8G1553000  M                            NaN    NaN      501.0   \n",
       "70400  920239I8G1553000  S                            NaN    NaN      499.0   \n",
       "70401  920239I8G1553000  XS                           NaN    NaN      205.0   \n",
       "\n",
       "       cost_price   price  \n",
       "0             NaN     NaN  \n",
       "1             NaN     NaN  \n",
       "2             NaN     NaN  \n",
       "3             NaN     NaN  \n",
       "4             NaN     NaN  \n",
       "...           ...     ...  \n",
       "70397       538.0  1442.0  \n",
       "70398      1244.0  3346.0  \n",
       "70399      1079.0  3097.0  \n",
       "70400       449.0  1051.0  \n",
       "70401       836.0  2483.0  \n",
       "\n",
       "[70402 rows x 7 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "general_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(70402, 7)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "general_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "new_art           0\n",
       "size              0\n",
       "month         10328\n",
       "sales         10328\n",
       "remainder     60074\n",
       "cost_price    60074\n",
       "price         60074\n",
       "dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "general_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>size</th>\n",
       "      <th>month</th>\n",
       "      <th>sales</th>\n",
       "      <th>remainder</th>\n",
       "      <th>cost_price</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>9.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>6.0</td>\n",
       "      <td>82.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>11.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>7.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>02025727Y05255D0</td>\n",
       "      <td>XS</td>\n",
       "      <td>10.0</td>\n",
       "      <td>93.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70397</th>\n",
       "      <td>920239I8G0250200</td>\n",
       "      <td>XS</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>538.0</td>\n",
       "      <td>1442.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70398</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>L</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>110.0</td>\n",
       "      <td>1244.0</td>\n",
       "      <td>3346.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70399</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>M</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>501.0</td>\n",
       "      <td>1079.0</td>\n",
       "      <td>3097.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70400</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>S</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>499.0</td>\n",
       "      <td>449.0</td>\n",
       "      <td>1051.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>70401</th>\n",
       "      <td>920239I8G1553000</td>\n",
       "      <td>XS</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>205.0</td>\n",
       "      <td>836.0</td>\n",
       "      <td>2483.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>70402 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                new_art                       size  month  sales  remainder  \\\n",
       "0      02025727Y05255D0                         XS    9.0   88.0        0.0   \n",
       "1      02025727Y05255D0                         XS    6.0   82.0        0.0   \n",
       "2      02025727Y05255D0                         XS   11.0   78.0        0.0   \n",
       "3      02025727Y05255D0                         XS    7.0   99.0        0.0   \n",
       "4      02025727Y05255D0                         XS   10.0   93.0        0.0   \n",
       "...                 ...                        ...    ...    ...        ...   \n",
       "70397  920239I8G0250200  XS                           0.0    0.0       81.0   \n",
       "70398  920239I8G1553000  L                            0.0    0.0      110.0   \n",
       "70399  920239I8G1553000  M                            0.0    0.0      501.0   \n",
       "70400  920239I8G1553000  S                            0.0    0.0      499.0   \n",
       "70401  920239I8G1553000  XS                           0.0    0.0      205.0   \n",
       "\n",
       "       cost_price   price  \n",
       "0             0.0     0.0  \n",
       "1             0.0     0.0  \n",
       "2             0.0     0.0  \n",
       "3             0.0     0.0  \n",
       "4             0.0     0.0  \n",
       "...           ...     ...  \n",
       "70397       538.0  1442.0  \n",
       "70398      1244.0  3346.0  \n",
       "70399      1079.0  3097.0  \n",
       "70400       449.0  1051.0  \n",
       "70401       836.0  2483.0  \n",
       "\n",
       "[70402 rows x 7 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "general_df.fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ВАЖНО: не по всем артикулам есть информация по остаткам/цене продажи/себестоимости, по таким позициям считать, что Их остаток равен 0\n",
    "# Себестоимость равна 200 рублей / шт.\n",
    "# Цена продажи составляет 1000 рублей / шт.\n",
    "# замена цены на 1000 рублей если сайз равен 0\n",
    "\n",
    "general_df['price'] = np.where(general_df['size'] == '0', 1000, general_df['price'])\n",
    "general_df['cost_price'] = np.where(general_df['size'] == '0', 200, general_df['cost_price'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Необходимо ответить на вопросы    \n",
    "•\t1. Назовите общую сумму продаж в рублях за июль?   \n",
    "•\t2. Какая общая сумма прибыли (продажи-себестоимость) в рублях в октябре?    \n",
    "•\t3. Назовите артикул (новый), который в рейтинге продаж (в рублях) был на 5 месте в августе?    \n",
    "•\t4. Какой остаток на складе ТОП-10 артикулов по продажам (в рублях) в августе?     \n",
    "•\t5. Определите, нормальное ли распределение ‘Продаж, шт’? Вычислите квадратное отклонение выборки, а также в каком диапазоне лежат 95% значений.      \n",
    "•\tПостройте график распределения количества буквенных размеров ('M', 'L', 'S', 'XL', 'XS', 'XXL', 'XXXL', 'XXS') в выборке"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 70402 entries, 0 to 70401\n",
      "Data columns (total 7 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   new_art     70402 non-null  object \n",
      " 1   size        70402 non-null  object \n",
      " 2   month       60074 non-null  float64\n",
      " 3   sales       60074 non-null  float64\n",
      " 4   remainder   10328 non-null  float64\n",
      " 5   cost_price  11336 non-null  float64\n",
      " 6   price       11336 non-null  float64\n",
      "dtypes: float64(5), object(2)\n",
      "memory usage: 4.3+ MB\n"
     ]
    }
   ],
   "source": [
    "general_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0           0\n",
       "1           0\n",
       "2           0\n",
       "3           0\n",
       "4           0\n",
       "         ... \n",
       "70397    1442\n",
       "70398    3346\n",
       "70399    3097\n",
       "70400    1051\n",
       "70401    2483\n",
       "Name: price, Length: 70402, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "general_df = general_df.fillna(0)\n",
    "general_df.month.astype(int)\n",
    "general_df.sales.astype(int)\n",
    "general_df.month.astype(int)\n",
    "general_df.remainder.astype(int)\n",
    "general_df.cost_price.astype(int)\n",
    "general_df.price.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1480</th>\n",
       "      <td>2202194625551100</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>0201494590353000</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606</th>\n",
       "      <td>02021947Q1453100</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>607</th>\n",
       "      <td>02021947Q7253100</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1403</th>\n",
       "      <td>2201394593859900</td>\n",
       "      <td>1000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>686</th>\n",
       "      <td>02022826231359P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>685</th>\n",
       "      <td>02022825933399P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>02022825933231P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>683</th>\n",
       "      <td>02022825932159P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1951</th>\n",
       "      <td>920239F593251900</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1952 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               new_art   price\n",
       "1480  2202194625551100  1000.0\n",
       "426   0201494590353000  1000.0\n",
       "606   02021947Q1453100  1000.0\n",
       "607   02021947Q7253100  1000.0\n",
       "1403  2201394593859900  1000.0\n",
       "...                ...     ...\n",
       "686   02022826231359P0     0.0\n",
       "685   02022825933399P0     0.0\n",
       "684   02022825933231P0     0.0\n",
       "683   02022825932159P0     0.0\n",
       "1951  920239F593251900     0.0\n",
       "\n",
       "[1952 rows x 2 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "july = general_df.query('month == 7')\n",
    "\n",
    "top_july = (july.groupby(['new_art'],as_index = False)['price'].sum()\n",
    "                                 .sort_values('price',ascending = False)\n",
    "                           )\n",
    "top_july"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "amount_july = (july.eval(\"Amount = sales * price\")\n",
    "         .groupby([\"new_art\"])\n",
    "         [\"Amount\"]\n",
    "         .sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1480</th>\n",
       "      <td>2202194625551100</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>0201494590353000</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606</th>\n",
       "      <td>02021947Q1453100</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>607</th>\n",
       "      <td>02021947Q7253100</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1403</th>\n",
       "      <td>2201394593859900</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>686</th>\n",
       "      <td>02022826231359P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>685</th>\n",
       "      <td>02022825933399P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684</th>\n",
       "      <td>02022825933231P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>683</th>\n",
       "      <td>02022825932159P0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1951</th>\n",
       "      <td>920239F593251900</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1952 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               new_art     Amount\n",
       "1480  2202194625551100  1000000.0\n",
       "426   0201494590353000  1000000.0\n",
       "606   02021947Q1453100  1000000.0\n",
       "607   02021947Q7253100  1000000.0\n",
       "1403  2201394593859900  1000000.0\n",
       "...                ...        ...\n",
       "686   02022826231359P0        0.0\n",
       "685   02022825933399P0        0.0\n",
       "684   02022825933231P0        0.0\n",
       "683   02022825932159P0        0.0\n",
       "1951  920239F593251900        0.0\n",
       "\n",
       "[1952 rows x 2 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "amount_july.reset_index().sort_values(by=\"Amount\", ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Общая сумма продаж в рублях за июль 144000000.0 руб"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "144000000.0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "amount_july.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8582"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# по кол-ву продаж\n",
    "general_df_july = july.groupby('new_art')['sales'].count()\n",
    "general_df_july.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. В июле было сделано 8582 продаж на сумму 144000000.0 руб, где общая сумма продаж рассчитана как кол-во * на цену"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Какая общая сумма прибыли (продажи-себестоимость) в рублях в октябре?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "october = general_df.query('month == 10')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "cost_price_october = october.groupby('new_art')['cost_price'].sum().astype(int)\n",
    "cost_price_october = cost_price_october.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28800"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cost_price_october # себестоимость товаров за октябрь"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "amount_october = (october.eval(\"Amount = sales * price\")\n",
    "         .groupby([\"new_art\"])[\"Amount\"].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "amount_october = october['sales'] * october['price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "amount_october = amount_october.sum().astype(int) # общая сумму продаж товаров за октябрь"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "pfofit_october = amount_october - cost_price_october"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "143971200"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pfofit_october.sum().astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Общая сумма прибыли (продажи-себестоимость) в рублях в октябре составляет 143971200 рублей."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Назовите артикул (новый), который в рейтинге продаж (в рублях) был на 5 месте в августе?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "august = general_df.query('month == 8')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_sales_august = august.groupby([\"new_art\"])[\"sales\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1550</th>\n",
       "      <td>22023714Z11355D0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>531</th>\n",
       "      <td>02021714Z10350D0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>836</th>\n",
       "      <td>02024717Y04251D0</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1800</th>\n",
       "      <td>32024712Y02351D0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>526</th>\n",
       "      <td>02021712Y01255D0</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               new_art  sales\n",
       "1550  22023714Z11355D0     10\n",
       "531   02021714Z10350D0     10\n",
       "836   02024717Y04251D0     10\n",
       "1800  32024712Y02351D0      9\n",
       "526   02021712Y01255D0      9"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_sales_august.reset_index().sort_values(by=\"sales\", ascending = False).head(5) # по кол-ву продаж"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_amount_august = (august.eval(\"Amount = sales * price\")\n",
    "         .groupby([\"new_art\"])[\"Amount\"].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>new_art</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1480</th>\n",
       "      <td>2202194625551100</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>426</th>\n",
       "      <td>0201494590353000</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>606</th>\n",
       "      <td>02021947Q1453100</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>607</th>\n",
       "      <td>02021947Q7253100</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1403</th>\n",
       "      <td>2201394593859900</td>\n",
       "      <td>1000000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               new_art     Amount\n",
       "1480  2202194625551100  1000000.0\n",
       "426   0201494590353000  1000000.0\n",
       "606   02021947Q1453100  1000000.0\n",
       "607   02021947Q7253100  1000000.0\n",
       "1403  2201394593859900  1000000.0"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_amount_august.reset_index().sort_values(by=\"Amount\", ascending = False).head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Новый артикул 02021712Y01255D0 в рейтинге продаж (в рублях) был на 5 месте в августе"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Какой остаток на складе ТОП-10 артикулов по продажам (в рублях) в августе?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "top_amount_august = (august.eval(\"Amount = sales * price\")\n",
    "         .groupby([\"new_art\"])[\"Amount\"].sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "august.loc['Amount'] = august.loc[:, 'sales'] * august.loc[:, 'price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10000000.0"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "august.loc[:, 'Amount'].sort_values(ascending=False)[:10].sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Остаток топ-10 по продажам 10000000.0 рублей за август."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Определите, нормальное ли распределение ‘Продаж, шт’? Вычислите квадратное отклонение выборки, а также в каком диапазоне лежат 95% значений.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Распределение ‘Продаж, шт’"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=0.316, p-value=0.000\n",
      "Отклонить гипотезу о нормальности\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/scipy/stats/morestats.py:1676: UserWarning: p-value may not be accurate for N > 5000.\n",
      "  warnings.warn(\"p-value may not be accurate for N > 5000.\")\n"
     ]
    }
   ],
   "source": [
    "import scipy\n",
    "from scipy.stats import stats\n",
    "import warnings\n",
    "# У нас в таблице более 5000 значений.\n",
    "\n",
    "stat, p = scipy.stats.shapiro(general_df.sales) # тест Шапиро-Уилк\n",
    "print('Statistics=%.3f, p-value=%.3f' % (stat, p))\n",
    "\n",
    "alpha = 0.05\n",
    "if p > alpha:\n",
    "    print('Принять гипотезу о нормальности')\n",
    "else:\n",
    "    print('Отклонить гипотезу о нормальности')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KstestResult(statistic=0.8466612171817045, pvalue=0.0)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Так как у нас большие данные применим тест Колмогорова-Смирнова\n",
    "\n",
    "'''Позволяет сначала настроить некоторые тестовые данные, например. \n",
    "обычно распределяется со средним значением 5 и стандартным отклонением 10'''\n",
    "scipy.stats.kstest(general_df.sales, 'norm', args=(5, 10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.14353055826059075 0.80446006901047\n"
     ]
    }
   ],
   "source": [
    "# стандартизирую данные перед тем, как поместить их в kstest\n",
    "from scipy import stats\n",
    "k, p = scipy.stats.kstest(stats.norm.rvs, cdf='norm', \n",
    "              args=(np.mean(general_df.sales), np.std(general_df.sales)))\n",
    "print(k, p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Statistics=87205.190, p-value=0.000\n",
      "Отклонить гипотезу о нормальности\n"
     ]
    }
   ],
   "source": [
    "stat, p = scipy.stats.normaltest(general_df.sales) # Критерий согласия Пирсона\n",
    "\n",
    "print('Statistics=%.3f, p-value=%.3f' % (stat, p))\n",
    "\n",
    "alpha = 0.05\n",
    "\n",
    "if p > alpha:\n",
    "    print('Принять гипотезу о нормальности')\n",
    "else:\n",
    "    print('Отклонить гипотезу о нормальности')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "146 значений Продаж, находящихся в диапазоне 95%\n",
      "82.0     1193\n",
      "83.0     1186\n",
      "80.0     1177\n",
      "88.0     1177\n",
      "81.0     1176\n",
      "         ... \n",
      "154.0       2\n",
      "10.0        2\n",
      "159.0       2\n",
      "163.0       2\n",
      "13.0        2\n",
      "Name: sales, Length: 146, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "Sales = general_df.sales.value_counts()\n",
    "\n",
    "# диапазон значений 95 %\n",
    "w1 = Sales.quantile(0.025)\n",
    "w2 = Sales.quantile(0.975)\n",
    " \n",
    "anse = Sales[(Sales > w1) & (Sales < w2)]\n",
    " \n",
    "print('146 значений Продаж, находящихся в диапазоне 95%', anse, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1125.75"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "anse.plot()\n",
    "np.percentile(anse, 95)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Среднее: 457.15584415584414\n",
      "Медиана: 205.0\n",
      "Ср. кв. отклонение: 903.993985533452\n",
      "Мода(моды):\n",
      "0    2\n",
      "dtype: int64\n",
      "\n",
      "Распределение продаж, шт\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1172d5350>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn\n",
    "print(\"Среднее: {0}\".format(Sales.mean()))\n",
    "print(\"Медиана: {0}\".format(Sales.median()))\n",
    "print(\"Ср. кв. отклонение: {0}\".format(sqrt(Sales.var())))\n",
    "print(\"Мода(моды):\\n{0}\".format(Sales.mode()))\n",
    "print(\"\\nРаспределение продаж, шт\")\n",
    "seaborn.distplot(Sales)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.Распределение Продаж, шт не нормальное.  Ср. кв. отклонение выборки: 904. В диапазоне 95% лежит 146 значений продаж, на 95 перцентили значение 1125.75"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Постройте график распределения количества буквенных размеров ('M', 'L', 'S', 'XL', 'XS', 'XXL', 'XXXL', 'XXS') в выборке"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['XS' 'S' 'M' 'L' 'XXXL' 'XXL' '28' 'XL' '34' 'XXS' '29' '30' '31' '4XL'\n",
      " '26' '33' '27' '32' '38' '0' '25' '36' '40' '35' '54-58' '37'\n",
      " 'M                        ' 'L                        '\n",
      " 'S                        ' 'XXL                      '\n",
      " 'XL                       ' '54-58                    '\n",
      " 'XXXL                     ' 'no size                  '\n",
      " '25-27                    ' '27-29                    '\n",
      " '34                       ' '31                       '\n",
      " '36                       ' '38                       '\n",
      " '30                       ' '32                       '\n",
      " '33                       ' 'XS                       '\n",
      " '4XL                      ' '40                       '\n",
      " '28                       ' '41                       '\n",
      " '42                       ' '43                       '\n",
      " '44                       ' 'XXS                      '\n",
      " '23-25                    ' '37                       '\n",
      " '39                       ' '25                       '\n",
      " '26                       ' '29                       '\n",
      " '27                       ' '75B                      '\n",
      " '75C                      ' '80B                      '\n",
      " '80C                      ' '85C                      '\n",
      " '35                       ' 'S/M                      ']\n"
     ]
    }
   ],
   "source": [
    "print(general_df['size'].unique()) # посмотрим все значения в столбце Size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M       9751\n",
      "L       9695\n",
      "S       9016\n",
      "XL      8995\n",
      "XS      6426\n",
      "XXL     5558\n",
      "XXXL    2408\n",
      "XXS     1029\n",
      "Name: size, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# выберу заданные значения\n",
    "Sizes = general_df[general_df.loc[:,\"size\"].isin(['M', 'L', 'S', 'XL', 'XS', 'XXL', 'XXXL', 'XXS'])][\"size\"].value_counts()\n",
    "print(Sizes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# строю график\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "x = Sizes.index\n",
    "y = Sizes.values\n",
    "\n",
    "ax.bar(x, y, color=\"g\")\n",
    "\n",
    "ax.set_facecolor('seashell')\n",
    "fig.set_facecolor('floralwhite')\n",
    "fig.set_figwidth(12)    #  ширина Figure\n",
    "fig.set_figheight(6)    #  высота Figure\n",
    "\n",
    "plt.title('Количество заданных размеров', fontsize=20)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
